platform :ios, '13.0'

# ✅ Use static linking to avoid modular header problems
use_frameworks! :linkage => :static

ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. Run `flutter pub get` first."
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end

  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting it and rerun `flutter pub get`."
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))

  # ✅ Disable modular headers just for Firebase
  pod 'Firebase/Core', :modular_headers => false
  pod 'Firebase/Messaging', :modular_headers => false

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end
end

# platform :ios, '13.0'
#
# # ✅ Use static linking to avoid modular header problems
# use_frameworks! :linkage => :static
#
# ENV['COCOAPODS_DISABLE_STATS'] = 'true'
#
# project 'Runner', {
#   'Debug' => :debug,
#   'Profile' => :release,
#   'Release' => :release,
# }
#
# def flutter_root
#   generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
#   unless File.exist?(generated_xcode_build_settings_path)
#     raise "#{generated_xcode_build_settings_path} must exist. Run `flutter pub get` first."
#   end
#
#   File.foreach(generated_xcode_build_settings_path) do |line|
#     matches = line.match(/FLUTTER_ROOT\=(.*)/)
#     return matches[1].strip if matches
#   end
#
#   raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting it and rerun `flutter pub get`."
# end
#
# require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
#
# flutter_ios_podfile_setup
#
# target 'Runner' do
#   flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))
#
#   # ✅ Disable modular headers just for Firebase
#   pod 'Firebase/Core', :modular_headers => false
#   pod 'Firebase/Messaging', :modular_headers => false
#
#   target 'RunnerTests' do
#     inherit! :search_paths
#   end
# end
#
# post_install do |installer|
#   installer.pods_project.targets.each do |target|
#     flutter_additional_ios_build_settings(target)
#   end
# end

# platform :ios, '13.0'
#
# use_frameworks! :linkage => :static  # ✅ Preferred over modular_headers for Flutter
#
# ENV['COCOAPODS_DISABLE_STATS'] = 'true'
#
# project 'Runner', {
#   'Debug' => :debug,
#   'Profile' => :release,
#   'Release' => :release,
# }
#
# def flutter_root
#   generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
#   unless File.exist?(generated_xcode_build_settings_path)
#     raise "#{generated_xcode_build_settings_path} must exist. Run `flutter pub get` first."
#   end
#
#   File.foreach(generated_xcode_build_settings_path) do |line|
#     matches = line.match(/FLUTTER_ROOT\=(.*)/)
#     return matches[1].strip if matches
#   end
#
#   raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting it and rerun `flutter pub get`."
# end
#
# require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
#
# flutter_ios_podfile_setup
#
# target 'Runner' do
#   flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
#
#   pod 'Firebase/Core', :modular_headers => false
#   pod 'Firebase/Messaging', :modular_headers => false
#
#   target 'RunnerTests' do
#     inherit! :search_paths
#   end
# end
#
# post_install do |installer|
#   installer.pods_project.targets.each do |target|
#     flutter_additional_ios_build_settings(target)
#   end
# end

# # Uncomment this line to define a global platform for your project
# platform :ios, '13.0'
#
# use_frameworks! :linkage => :static
# # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
# ENV['COCOAPODS_DISABLE_STATS'] = 'true'
#
# project 'Runner', {
#   'Debug' => :debug,
#
#   'Profile' => :release,
#   'Release' => :release,
# }
#
# def flutter_root
#   generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
#   unless File.exist?(generated_xcode_build_settings_path)
#     raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
#   end
#
#   File.foreach(generated_xcode_build_settings_path) do |line|
#     matches = line.match(/FLUTTER_ROOT\=(.*)/)
#     return matches[1].strip if matches
#   end
#   raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
# end
#
# require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
#
# flutter_ios_podfile_setup
#
# target 'Runner' do
#   use_frameworks!
#   use_modular_headers!
#
#   flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
#
#   pod 'Firebase/Core', :modular_headers => false
#   pod 'Firebase/Messaging', :modular_headers => false
#
#   target 'RunnerTests' do
#     inherit! :search_paths
#   end
# end
#
# post_install do |installer|
#   installer.pods_project.targets.each do |target|
#     flutter_additional_ios_build_settings(target)
#   end
# end
